// === –≠–ª–µ–º–µ–Ω—Ç—ã ===
const startScreen = document.getElementById('startScreen');
const buyScreen = document.getElementById('buyScreen');
const btnBuyStars = document.getElementById('btnBuyStars');
const btnBack = document.getElementById('btnBack');
const starInput = document.getElementById('starInput');
const payButton = document.getElementById('payButton');
const userInfo = document.getElementById('userInfo');

// === –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ ===
btnBuyStars.addEventListener('click', () => {
  startScreen.classList.add('hidden');
  buyScreen.classList.remove('hidden');
});

btnBack.addEventListener('click', () => {
  buyScreen.classList.add('hidden');
  startScreen.classList.remove('hidden');
});

// === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ –∫–Ω–æ–ø–∫–∞–º–∏ ===
function setStars(amount) {
  starInput.value = amount;
}

// === Telegram WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
const tg = window.Telegram.WebApp;
tg.expand();

const user = tg.initDataUnsafe.user;
if (user) {
  userInfo.innerText = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name} ${user.last_name || ''} (@${user.username || '-'})`;
} else {
  userInfo.innerText = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞";
}

// === –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TonConnect ===
payButton.addEventListener('click', async () => {
  const amount = parseInt(starInput.value);
  if (!amount || amount <= 0) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥');
    return;
  }
  if (!user) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Telegram, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É');
    return;
  }

  const tonAddress = "UQC-V7DG1I6T2Q0pbIllLAHbQiPdVtKlbw1ZSZHPHNosc-tA";
  const pricePer1000 = 0.0083;
  const priceInTon = ((amount / 1000) * pricePer1000).toFixed(4);

  const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://ton-connect.github.io/demo-dapp-with-react/tonconnect-manifest.json',
    buttonRootId: '',
  });

  await tonConnectUI.connectWallet();

  const tx = {
    validUntil: Math.floor(Date.now() / 1000) + 600,
    messages: [{
      address: tonAddress,
      amount: (parseFloat(priceInTon) * 1e9).toFixed(0)
    }]
  };

  try {
    await tonConnectUI.sendTransaction(tx);
    alert('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    sendStarsToUser(user.username, amount);
  } catch (e) {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: " + e.message);
  }
});

function sendStarsToUser(username, amount) {
  // –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è backend –∏–ª–∏ Bot API
  console.log(`–ù–∞—á–∏—Å–ª—è–µ–º ${amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
  alert(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø–æ–ª—É—á–∏–ª ${amount} –∑–≤—ë–∑–¥. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`);
}

// === –ó–≤—ë–∑–¥—ã –∏ –ø–∞–¥–∞—é—â–∏–µ NFT –ø–æ–¥–∞—Ä–∫–∏ ===
const canvas = document.getElementById('starCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const starChar = '‚≠êÔ∏è';

// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ "–ø–æ–¥–∞—Ä–∫–∏" ‚Äî –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –¢–ì
const nftIcons = ['üö¨', '‚åö', 'üíç', 'üê∏', 'üåô', 'üé©']; // —Å–∏–≥–∞—Ä–∞, —á–∞—Å—ã, –∫–æ–ª—å—Ü–æ, –ø–ª—é—à, —Å–µ–π–ª–æ—Ä –º—É–Ω—É, —à–ª—è–ø–∞

class FallingItem {
  constructor(text) {
    this.text = text;
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * -canvas.height;
    this.speed = 1 + Math.random() * 2;
    this.fontSize = 20 + Math.random() * 20;
  }
  draw() {
    ctx.font = `${this.fontSize}px Arial`;
    ctx.fillText(this.text, this.x, this.y);
    this.y += this.speed;
    if (this.y > canvas.height) {
      this.y = Math.random() * -canvas.height;
      this.x = Math.random() * canvas.width;
    }
  }
}

const fallingStars = [];
for(let i=0; i<70; i++) fallingStars.push(new FallingItem(starChar));
const fallingNFTs = [];
for(let i=0; i<20; i++) fallingNFTs.push(new FallingItem(nftIcons[i % nftIcons.length]));

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = 'white';
  fallingStars.forEach(s => s.draw());
  fallingNFTs.forEach(n => n.draw());
  requestAnimationFrame(animate);
}
animate();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});
document.getElementById("pay-btn").addEventListener("click", async () => {
  const stars = selectedStars; // –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const tg = window.Telegram.WebApp;

  const userId = tg.initDataUnsafe.user?.id;
  if (!userId) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID");
    return;
  }

  try {
    const res = await fetch("https://—Ç–≤–æ–π-—Å–µ—Ä–≤–µ—Ä.onrender.com/initiate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId, stars }),
    });

    const data = await res.json();

    if (data.address && data.comment) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
      document.getElementById("payment-info").innerHTML = `
        <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>${data.amountTon} TON</b> –Ω–∞ –∞–¥—Ä–µ—Å:</p>
        <code>${data.address}</code>
        <p>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</p>
        <code>${data.comment}</code>
      `;
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
  }
});
